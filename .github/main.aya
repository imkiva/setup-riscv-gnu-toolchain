open data Nat
  | zero
  | suc Nat

overlap def infixl + (a b : Nat) : Nat
  | 0, a => a
  | a, 0 => a
  | suc a, b => suc (a + b)
  | a, suc b => suc (a + b)

open data Fin (n : Nat)
  | suc n => fzero
  | suc n => fsuc (Fin n)

def finToNat {n : Nat} (att : Fin n) : Nat
  | fzero => 0
  | fsuc a => suc (finToNat a)

def addF {m n : Nat} (a : Fin m) (b : Fin n) : Fin (finToNat a + n)
  | fzero, a => a
  | fsuc a, b => fsuc (addF a b)
